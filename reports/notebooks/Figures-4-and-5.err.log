Traceback (most recent call last):
  File "C:\Users\madir\anaconda3\envs\radcode\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\madir\anaconda3\envs\radcode\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\madir\anaconda3\envs\radcode\Lib\site-packages\jupyter_core\utils\__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\madir\anaconda3\envs\radcode\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\madir\anaconda3\envs\radcode\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\madir\anaconda3\envs\radcode\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\madir\anaconda3\envs\radcode\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Main plotting function to generate the figure
def plot_figure(planet_start_num,planet_num,pdict,mechanism_dict,system_dict,save='null',legend=False):
    
    # Create a blank figure and axes
    fig = plt.figure(figsize=[12, 24],facecolor='white')
    spec= gridspec.GridSpec(ncols=2, nrows=1, width_ratios=[1,3], wspace=0, figure=fig)
    ax1=fig.add_subplot(spec[0])
    ax2=fig.add_subplot(spec[1],sharey=ax1)
    
    # Define initial values for label list, current system, and system index
    labels,system,sysi = [],'null',0
    
    # Loop through systems, building top to bottom
    for i in range(planet_start_num,planet_start_num+planet_num):
        
        # Set displacement and plot on right axis
        ydisplace = 5 * (i-planet_start_num)
        
        # Plot the right subplot
        plot_errors(ax2,pdict['rockyplanets'][i],pdict['envplanets'][i],ydisplace,mechanism_dict,i-planet_start_num)
        ax2.errorbar(pdict['envmass'][i], ydisplace, xerr=[pdict['envmasserr'][i]], fmt='^', color='k', label=(i-planet_start_num)*'_'+'Measured', zorder=1)
        ax1.hlines(ydisplace, 0, 115, linestyles="--", color='gray')
        ax1.scatter(pdict['envper'][i], ydisplace, s=size(pdict['envrad'][i]), color='slategray')
        ax1.scatter(pdict['rockyper'][i], ydisplace, s=pdict['rockyrad'][i]*40, color='k')
        
        # Determine system labels
        envletter = pdict['envplanets'][i].split(' ')[-1]
        labels.append(f'{pdict['rockyplanets'][i]}/{envletter}')
        
        # Determine which system is being plotted
        if system != planets['planet name'].iloc[i]: system,sysi = planets['planet name'].iloc[i],i

        # Plot enveloped and rocky planets
        for j in range(len(system_dict[system]['env'])):
            ax1.scatter(pdict['envper'][sysi+j], ydisplace, s=size(pdict['envrad'][sysi+j]), color='slategray', alpha=0.3)
        for j in range(len(system_dict[system]['rocky'])):
            env_num = len(system_dict[system]['env'])
            ax1.scatter(pdict['rockyper'][sysi+j*env_num], ydisplace, s=pdict['rockyrad'][sysi+j*env_num]*40, color='k', alpha=0.2)
    
    # Plot labels, legends, and save figure
    label_plot([ax1,ax2],planet_num,labels)
    if legend: 
        legend_plot(ax2,planet_num)
    if save!='null': 
        plt.savefig(save, dpi=300., bbox_inches='tight')
------------------


[1;36m  Cell [1;32mIn[13], line 28[1;36m[0m
[1;33m    labels.append(f'{pdict['rockyplanets'][i]}/{envletter}')[0m
[1;37m                            ^[0m
[1;31mSyntaxError[0m[1;31m:[0m f-string: unmatched '['


